<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8"/>
    <title>Тест производительности шаблонизаторов</title>
    <link rel="stylesheet" href="css/styles.css" type="text/css"/>
    <script src="libs/jquery-2.0.3.js" type="text/javascript"></script>
    <script>
        $(function () {
            $.browser = {
                msie:false
            };
        });
    </script>
    <script src="libs/jquery.benchmark.js" type="text/javascript"></script>
    <script src="libs/jquery.flot.min.js" type="text/javascript"></script>
    <script src="libs/mustache.js" type="text/javascript"></script>
    <script src="libs/jquery.mustache.js" type="text/javascript"></script>
    <script src="libs/handlebars.js" type="text/javascript"></script>
    <!--<script src="libs/jquery.tempest.js" type="text/javascript"></script>-->
    <script src="libs/jquery.tmpl.js" type="text/javascript"></script>
    <script src="libs/jquery.templates.js" type="text/javascript"></script>
    <script src="libs/underscore.js" type="text/javascript"></script>
    <script src="libs/jquery.srender.js" type="text/javascript"></script>
    <script src="libs/jquery.nano.js" type="text/javascript"></script>
    <script src="libs/ejs_production.js" type="text/javascript"></script>
    <script src="libs/pure.min.js" type="text/javascript"></script>
    <script src="libs/jquery.jqote2.js" type="text/javascript"></script>
    <script src="libs/doT.js" type="text/javascript"></script>
    <script src="libs/dust-full-2.0.2.js" type="text/javascript"></script>
    <script src="libs/jquery-jtemplates.js" type="text/javascript"></script>
    <script src="libs/jsrender.js" type="text/javascript"></script>
    <script src="libs/hogan-2.0.0.js" type="text/javascript"></script>
</head>
<body>
<h1>Тест производительности шаблонизаторов</h1>
<ul id="contestants">
    <li>
        <p><input type="checkbox" name="contestant" value="srender"/> srender</p>
        <ul class="progress srender"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="mustache_js"/> mustache.js</p>
        <ul class="progress mustache_js"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="jquery_mustache_js"/> jquery.mustache.js</p>
        <ul class="progress jquery_mustache_js"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="underscore"/> Underscore</p>
        <ul class="progress underscore"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="jqote2"/> jQote2</p>
        <ul class="progress jqote2"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="doT"/> doT</p>
        <ul class="progress doT"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="handlebars"/> Handlebars</p>
        <ul class="progress handlebars"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="nano"/> nano</p>
        <ul class="progress nano"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="tmpl"/> jQuery Templates</p>
        <ul class="progress tmpl"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="ejs"/> EJS</p>
        <ul class="progress ejs"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="pure"/> pure</p>
        <ul class="progress pure"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="dust"/> dust</p>
        <ul class="progress dust"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="wayneeseguin"/> wayneeseguin</p>
        <ul class="progress wayneeseguin"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="jTemplates"/> jTemplates</p>
        <ul class="progress jTemplates"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="jsRender"/> jsRender</p>
        <ul class="progress jsRender"></ul>
        <p class="number"></p>
    </li>
    <li>
        <p><input type="checkbox" name="contestant" value="hoganjs"/> hoganJS</p>
        <ul class="progress hoganjs"></ul>
        <p class="number"></p>
    </li>
    <li>
        <input type="checkbox" name="check" value="0"/> Check all
    </li>
    <li>
        <button id="run">Поехали!</button>
        &#xa0;&#xa0;Количество повторов:&#xa0;
        5x <input type="radio" name="cycles" value="5" checked="checked"/>
        10x <input type="radio" name="cycles" value="10"/>
        25x <input type="radio" name="cycles" value="25"/>
        50x <input type="radio" name="cycles" value="50"/>
        &#xa0;&#xa0;Типы:&#xa0;
        Простой <input type="checkbox" name="simple_test" value="1" checked="checked"/>
        Цикл <input type="checkbox" name="loop_test" value="2" checked="checked"/>
    </li>
</ul>
<h2>█ Один запуск &#xa0;&#xa0; [среднее время выполнения]</h2>

<div id="placeholder"></div>
<div id="pure">
    <div class="test">
        <h2></h2>

        <p>The homepage is <a></a>.</p>

        <p></p>
    </div>
    <div class="comments">
        <h3></h3>
        <ul>
            <li class="comment">
                <h5><%= this.comments[n].name %></h5>

                <p><%= this.comments[n].body %></p>
            </li>
        </ul>
    </div>
</div>
<script type="text/x-jqote-template" id="jqote2_simple">
    <![CDATA[
    <div class="test"><h2>This is a test of <%= this.name %></h2>

        <p>The homepage is <a href="<%= this.url %>"><%= this.url %></a>.</p>

        <p>The sources is: <%= this.source %></p></div>
    ]]>
</script>
<script type="text/x-jqote-template" id="jqote2_loop">
    <![CDATA[
    <div class="comments"><h3><%= this.header %></h3>
        <ul><% for ( var n=0,m=this.comments.length;n
            <m
            ;n++ ) { %>
            <li class="comment"><h5><%= this.comments[n].name %></h5>

                <p><%= this.comments[n].body %></p></li>
            <% } %>
        </ul>
    </div>
    ]]>
</script>
<script type="text/x-jquery-template" id="wayneeseguin_simple" title="simple">
    <![CDATA[
    <div class="test"><h2>This is a test of <%= self.name %></h2>

        <p>The homepage is <a href="<%= self.url %>"><%= self.url %></a>.</p>

        <p>The sources is: <%= self.source %></p></div>
    ]]>
</script>
<script type="text/x-jquery-template" id="wayneeseguin_loop" title="loop">
    <![CDATA[
    <div class="comments"><h3><%= self.header %></h3>
        <ul><% for ( var n=0,m=self.comments.length;n
            <m
            ;n++ ) { %>
            <li class="comment"><h5><%= self.comments[n].name %></h5>

                <p><%= self.comments[n].body %></p></li>
            <% } %>
        </ul>
    </div>
    ]]>
</script>
<script type="text/x-ejs" id="ejs_simple">
    <div class="test"><h2>This is a test of [%= name %]</h2>

        <p>The homepage is <a href="[%= url %]">[%= url %]</a>.</p>

        <p>The sources is: [%= source %]</p></div>
</script>
<script type="text/x-ejs" id="ejs_loop">
    <div class="comments"><h3>[%= header %]</h3>
        <ul>[% $.each(comments, function(i, comment){ %]
            <li class="comment"><h5>[%= comment.name %]</h5>

                <p>[%= comment.body %]</p></li>
            [% }); %]
        </ul>
    </div>
</script>
<script type="text/x-jquery-tmpl" id="tmpl_simple">
    <![CDATA[
    <div class="test"><h2>This is a test of ${name}</h2>

        <p>The homepage is <a href="${url}">${this.url}</a>.</p>

        <p>The sources is: ${source}</p></div>
    ]]>
</script>
<script type="text/x-jquery-tmpl" id="tmpl_loop">
    <![CDATA[
    <div class="comments"><h3>${header}</h3>
        <ul>{{each(i, comment) comments}}
            <li class="comment"><h5>${comment.name}</h5>

                <p>${comment.body}</p></li>
            {{/each}}
        </ul>
    </div>
    ]]>
</script>

<script type="text/javascript">
var CYCLES = $('input:radio:checked').val(),
        CONVERSIONS = 1000,
        RUN_LEAP = Math.round(CONVERSIONS * 0.5),
        contestants = {};

function shuffle(v) {
    for (var j, x, i = v.length; i; j = parseInt(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
    return v;
}
function mean(array) {
    if (!array.length) return 0;

    var sum = 0;
    for (var i = 0; i < array.length; i++)
        sum += parseFloat(array[i], 4);
    return (1 / array.length) * sum;
}
function median(array) {
    if (!array.length) return 0;

    var s = array.sort(function (a, b) {
        return a - b;
    }).length;
    return s % 2 ?
            array[(s - 1) / 2] : (array[(s / 2) - 1] + array[s / 2]) / 2;
}
function plot(cons) {
    var data = [], i = 1;

    for (key in cons) {
        var result = {
            median:median(cons[key].results).toPrecision(2) * 1000,
            mean:mean(cons[key].results).toPrecision(2) * 1000
        };

        data.push({
            label:cons[key].name,
            data:[
                [i++, result.median],
                [i++, null]
            ],
            color:cons[key].color,
            bars:{
                show:true,
                barWidth:1,
                lineWidth:1,
                fill:1,
                colors:cons[key].color
            }
        });

        if (cons[key].results.length)
            cons[key].number.text('[' + result.mean + ' ms]');
    }

    $.plot($('#placeholder'), data, {
        xaxis:{ ticks:[
            [1.5, 'Srender'],
            [3.5, 'mustache.js'],
            [5.5, 'jquery.mustache.js'],
            [7.5, 'Underscore'],
            [9.5, 'jQote2'],
            [11.5, 'doT'],
            [13.5, 'Handlebars'],
            [15.5, 'nano'],
            [17.5, 'jQuery Templates'],
            [19.5, 'EJS'],
            [21.5, 'pure'],
            [23.5, 'dust'],
            [25.5, 'wayneeseguin'],
            [27.5, 'jTemplates'],
            [29.5, 'jsRender'],
            [31.5, 'hoganjs']
        ], autoscaleMargin:.02 },
        yaxis:{ min:0, max:100 },
        legend:{ position:'ne' },
        grid:{  backgroundColor:'#ffffff' }
    });
}

$(function () {

    $.loadTemplates();

    var benchmarks = {
        srender:{
            simple:function () {
                $.srender(this.simple, payload.simple);
            },
            loop:function () {
                $.srender(this.loop, payload.loop);
            }
        },
        mustache_js:{
            simple:function () {
                Mustache.render(this.simple, payload.simple);
            },
            loop:function () {
                Mustache.render(this.loop, payload.loop);
            }
        },
        jquery_mustache_js:{
            simple:function () {
                $.Mustache.add("simple", this.simple);
                $.Mustache.render("simple", payload.simple);
            },
            loop:function () {
                $.Mustache.add("loop", this.loop);
                $.Mustache.render("loop", payload.loop);
            }
        },
        underscore:{
            simple:function () {
                this.simple(payload.simple);
            },
            loop:function () {
                this.loop(payload.loop);
            }
        },
        jqote2:{
            simple:function () {
                $.jqote(this.simple, payload.simple);
            },
            loop:function () {
                $.jqote(this.loop, payload.loop);
            }
        },
        doT:{
            simple:function () {
                this.simple(payload.simple);
            },
            loop:function () {
                this.loop(payload.loop);
            }
        },
        handlebars: {
            simple:function () {
                this.simple(payload.simple);
            },
            loop:function () {
                this.loop(payload.loop);
            }
        },
        //tempest:{
        //    simple:function () {/*$.tempest(this.simple, payload.simple);*/
        //    },
        //    loop:function () {/*$.tempest(this.loop, payload.loop);*/
        //    }
        //},
        nano:{
            simple:function () {
                $.nano(this.simple, payload.simple);
            },
            loop:function () {
                var nano = {comments:'', header:payload.loop.header};
                for (var i = 0; i < payload.loop.comments.length; i++)
                    nano.comments += $.nano(this.loop.comment, payload.loop.comments[i]);

                $.nano(this.loop.container, nano);
            }
        },
        tmpl:{
            simple:function () {
                this.simple($, {data:payload.simple}).join("");
            },
            loop:function () {
                this.loop($, {data:payload.loop}).join("");
            }
        },
        ejs:{
            simple:function () {
                this.simple.render(payload.simple);
            },
            loop:function () {
                this.loop.render(payload.loop);
            }
        },
        pure:{
            simple:function () {
                this.simple(payload.simple);
            },
            loop:function () {
                this.loop(payload.loop);
            }
        },
        dust:{
            simple:function () {
                dust.render("simple", payload.simple, function () {});
            },
            loop:function () {
                dust.render("loop", payload.loop, function () {});
            }
        },
        wayneeseguin:{
            simple:function () {
                this.simple(payload.simple);
            },
            loop:function () {
                this.loop(payload.loop);
            }
        },
        jTemplates:{
            simple:function () {
                $.processTemplateToText(this.simple,payload.simple);
            },
            loop:function () {
                $.processTemplateToText(this.loop,payload.loop);
            }
        },
        jsRender: {
            simple:function () {
                $.render.simple(payload.simple);
            },
            loop:function () {
                $.render.loop(payload.loop);
            }
        },
        hoganjs: {
            simple:function () {
                this.simple.render(payload.simple);
            },
            loop:function () {
                this.loop.render(payload.loop);
            }
        }
    };

    var templates = {
        mustache_js:{
            simple:'<div class="test"><h2>This is a test of {{name}}</h2><p>The homepage is <a href="{{url}}">{{url}}</a>.</p><p>The sources is: {{source}}</p></div>',
            loop:'<div class="comments"><h3>{{header}}</h3><ul>{{#comments}}<li class="comment"><h5>{{name}}</h5><p>{{body}}</p></li>{{/comments}}</ul></div>'
        },
        jquery_mustache_js:{
            simple:'<div class="test"><h2>This is a test of {{name}}</h2><p>The homepage is <a href="{{url}}">{{url}}</a>.</p><p>The sources is: {{source}}</p></div>',
            loop:'<div class="comments"><h3>{{header}}</h3><ul>{{#comments}}<li class="comment"><h5>{{name}}</h5><p>{{body}}</p></li>{{/comments}}</ul></div>'
        },
        underscore:{
            simple:_.template('<div class="test"><h2>This is a test of <%= name %></h2><p>The homepage is <a href="<%= url %>"><%= url %></a>.</p><p>The sources is: <%= source %></p></div>'),
            loop:_.template('<div class="comments"><h3><%= header %></h3><ul><% _.each(comments, function(comment){ %><li class="comment"><h5><%= comment.name %></h5><p><%= comment.body %></p></li><% }); %></ul></div>')
        },
        srender:{
            simple:'<div class="test"><h2>This is a test of <%= name %></h2><p>The homepage is <a href="<%= url %>"><%= url %></a>.</p><p>The sources is: <%= source %></p></div>',
            loop:'<div class="comments"><h3><%= header %></h3><ul><% $.each(comments, function(i, comment){ %><li class="comment"><h5><%= comment.name %></h5><p><%= comment.body %></p></li><% }); %></ul></div>'
        },
        jqote2:{
            simple:$.jqotec('#jqote2_simple'),
            loop:$.jqotec('#jqote2_loop')
        },
        doT:{
            simple:doT.template('<div class="test"><h2>This is a test of {{= it.name }}</h2><p>The homepage is <a href="{{= it.url }}">{{= this.url }}</a>.</p><p>The sources is: {{= it.source }}</p></div>'),
            loop:doT.template('<div class="comments"><h3>{{= it.header }}</h3><ul>{{~it.comments :comment}}<li class="comment"><h5>{{= comment.name }}</h5><p>{{= comment.body }}</p></li>{{~}}</ul></div>')
        },
        handlebars:{
            simple:Handlebars.compile('<div class="test"><h2>This is a test of {{name}}</h2><p>The homepage is <a href="{{url}}">{{url}}</a>.</p><p>The sources is: {{source}}</p></div>'),
            loop:Handlebars.compile('<div class="comments"><h3>{{header}}</h3><ul>{{#comments}}<li class="comment"><h5>{{name}}</h5><p>{{body}}</p></li>{{/comments}}</ul></div>')
        },
        /*tempest:{
            simple:"", //$.tempest('simple', '<div class="test"><h2>This is a test of {{name}}</h2><p>The homepage is <a href="{{url}}">{{url}}</a>.</p><p>The sources is: {{source}}</p></div>') && 'simple',
            loop:""//$.tempest('loop', '<div class="comments"><h3>{{header}}</h3><ul>{% for comment in comments %}<li class="comment"<h5>{{comment.name}}</h5><p>{{comment.body}}</p></li>{% endfor %}</ul></div>') && 'loop'
        },*/
        nano:{
            simple:'<div class="test"><h2>This is a test of {name}</h2><p>The homepage is <a href="{url}">{url}</a>.</p><p>The sources is: {source}</p></div>',
            loop:{
                comment:'<li class="comment"><h5>{name}</h5><p>{body}</p></li>',
                container:'<div class="comments"><h3>{header}</h3><ul>{comments}</ul></div>'
            }
        },
        tmpl:{
            simple:$('#tmpl_simple').template(),
            loop:$('#tmpl_loop').template()
        },
        ejs:{
            simple:new EJS({element:$('#ejs_simple')[0]}),
            loop:new EJS({element:$('#ejs_loop')[0]})
        },
        pure:{
            simple:$('#pure div.test').compile({
                'h2':'This is a test of #{name}',
                'p a':'url',
                'p a@href':'url',
                'p:last-child':'The sources is: #{source}'
            }),
            loop:$('#pure div.comments').compile({
                'h3':'header',
                'li':{
                    'comment<-comments':{
                        'h5':'comment.name',
                        'p':'comment.body'
                    }
                }
            })
        },
        dust:{
            simple:dust.loadSource(dust.compile('<div class="test"><h2>This is a test of {name}</h2><p>The homepage is <a href="{url}">{url}</a>.</p><p>The sources is: {source}</p></div>', "simple")),
            loop:dust.loadSource(dust.compile('<div class="comments"><h3>{header}</h3><ul>{#comments}<li class="comment"><h5>{name}</h5><p>{body}</p></li>{/comments}</ul></div>', "loop"))
        },
        wayneeseguin:{
            simple: $.wayneeseguinTemplates.simple,
            loop: $.wayneeseguinTemplates.loop
        },
        jTemplates:{
            simple:$.createTemplate('<div class="test"><h2>This is a test of {$T.name}</h2><p>The homepage is <a href="{$T.url}">{$T.url}</a>.</p><p>The sources is: {$T.source}</p></div>'),
            loop:$.createTemplate('<div class="comments"><h3>{$T.header}</h3><ul>{#foreach $T.comments as comment}<li class="comment"><h5>{$T.comment.name}</h5><p>{$T.comment.body}</p></li>{#/for}</ul></div>')
        },
        jsRender: $.templates({
            simple: '<div class="test"><h2>This is a test of {{:name}}</h2><p>The homepage is <a href="{{:url}}">{{:url}}</a>.</p><p>The sources is: {{:source}}</p></div>',
            loop: '<div class="comments"><h3>{{:header}}</h3><ul>{{for comments}}<li class="comment"><h5>{{:name}}</h5><p>{{:body}}</p></li>{{/for}}</ul></div>'
        }),
        hoganjs: {
            simple: Hogan.compile('<div class="test"><h2>This is a test of {{name}}</h2><p>The homepage is <a href="{{url}}">{{url}}</a>.</p><p>The sources is: {{source}}</p></div>'),
            loop: Hogan.compile('<div class="comments"><h3>{{header}}</h3><ul>{{#comments}}<li class="comment"><h5>{{name}}</h5><p>{{body}}</p></li>{{/comments}}</ul></div>')
        }
    };

    var payload = {
        simple:{
            name:'foo',
            url:'http://foo.bar/foo',
            source:'http://foo.bar/jquery.foo.js'
        },
        loop:{
            header:"My Post Comments",
            comments:[
                {name:"Joe", body:"Comment 1: Thanks for this post!"},
                {name:"Sam", body:"Comment 2: Thanks for this post!"},
                {name:"Heather", body:"Comment 3: Thanks for this post!"},
                {name:"Kathy", body:"Comment 4: Thanks for this post!"},
                {name:"George", body:"Comment 5: Thanks for this post!"}
            ]
        }
    };

    var color = {
        mustache_js:'#8f04a8',
        jquery_mustache_js:'#835418',
        underscore:'#cd0074',
        srender:'#5b4cd8',
        jqote2:'#70e500',
        handlebars:'#0d3349',
        nano:'#fff800',
        tmpl:'#00f8ff',
        ejs:'#f800ff',
        pure:'#ff9900',
        doT:'#1234ff',
        dust:'#ff3456',
        wayneeseguin:'#12ff56',
        jTemplates:'#fc00cf',
        jsRender: "#0ac789"
    };

    $('input[name=check]').click(function () {
        var checked = this.checked;

        $('input[name=contestant]').each(function () {
            this.checked = checked;
        });
    });

    $('input[name=contestant]').each(function (i) {
        var key = this.value;

        contestants[key] = {
            name:key,
            results:[],
            input:$(this),
            color:color[key],
            number:$('p.number', $(this).parents('li')[0]),
            progress:$('ul.progress', $(this).parents('li')[0]),
            templates:templates[key],
            benchmarks:benchmarks[key]
        };
    }).click(function () {
                $('input[name=check]')[0].checked = false;
            });

    $('#run').click(function () {
        CYCLES = $('input:radio:checked').val();
        $('ul.progress, p.number').empty();
        $(this).trigger('benchmark');

    })
        .bind('benchmark', function () {
                var cons = shuffle($('input[name=contestant]:checked').toArray()),
                        runs = cons.length;

                if (!runs) return;

                var test_run = setInterval(function () {
                    var contestant = null;

                    if (!(contestant = cons.shift())) return;

                    if ($('input[name=simple_test]:checked').length)
                        $.benchmark(CONVERSIONS, contestants[contestant.value], 'simple');
                    if ($('input[name=loop_test]:checked').length)
                        $.benchmark(CONVERSIONS, contestants[contestant.value], 'loop');

                    contestants[contestant.value].progress.append('<li/>');
                }, RUN_LEAP);

                setTimeout(function () {
                    clearInterval(test_run);
                    ( --CYCLES ) ? $('#run').trigger('benchmark') : plot(contestants);
                }, RUN_LEAP * runs + 1500);
            });
});
</script>
</body>
</html>
